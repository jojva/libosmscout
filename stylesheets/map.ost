OST

/*
  Types:
    A type can be support for any of the following types: 
    * NODE
    * WAY: Ways automatically get assigned the following features: Layer
    * AREA
    * RELATION

  Meaning of the different OPTIONS:
    PATH[[FOOT] [BICYLCE] [CAR]]:
      This way or area is a traversable path and possibly routable for the given vehicles.

      See: http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Access-Restrictions

      If something is a path, the following features are automatically assigned:
      * Width
      * Grade
      * Bridge
      * Tunnel
      * Roundabout 
      If something is routable, the following features are automatically assigned:
      * Access
      * MaxSpeed
    OPTIMIZE_LOW_ZOOM:
      Optimize this area or way for idplaying in low zoom by
      reducing visible complexity
    PIN_WAY:
      This is a way, even if the path is closed
    MULTIPOLYGON:
      Tye should be handled as multipolygon even if type is not set to multipolygon.
    ADMIN_REGION:
      The given area or node describes an administrate region
      that should be part of the region tree for the city/street
      index
    POI:
      The given area, way or node is a POI and should be indexed
      by its name in relation to the enclosing region. If something is a POI and has the
      feature "Name"
      It automatically get the following features assigned:
      * Location
      * Address
    ADDRESS:
      Objects should be indexed as address  
      It automatically get the following features assigned:
      * Location
      * Address
    LOCATION:
      The given way or area should be indexed as location.
    MERGE_AREAS:
      Areas of this type that "touch" each other and the same attribute values
      will get merged.    
    IGNORESEALAND:
      Ignore this type for calculation of land masses (because objects of this type can
      occur on sea, too, and thus have no distinguishing character).
    IGNORE:
      Ignore objects of this type
*/

/*
  List of max speeds aliases. Normally value for the tag "maxspeed" should always
  have a numeric value and the source of the speed limit should be placed into
  the value of the tag "source:maxspeed" containing an alias name.
  In some country this is not (only) the case, the alias is also sometimes
  placed into "maxspeed" itself. This table helps to resolve these aliases
  to numeric values again.
*/
MAX SPEEDS
  SPEED "DE:living_street" =  10 km/h
  SPEED "DE:urban"         =  50 km/h
  SPEED "DE:rural"         = 100 km/h

  SPEED "FR:walk"          =   6 km/h
  SPEED "FR:urban"         =  50 km/h
  SPEED "FR:rural"         =  90 km/h
  SPEED "FR:motorway"      = 130 km/h

/*
  Allows you to map surface descriptions to a grade value ([1-5]).
  Grade 1 ist very well, grade 5 is very bad.
*/
GRADES
  SURFACE GRADE 1 {
    "paved"
    "asphalt"
    "cobblestone"
    "cobblestone:flattened"
    "concrete"
    "concrete:lanes"
    "concrete:plates"
    "paving_stones"
    "paving_stones:20"
    "paving_stones:30"
    "sett"
    "tarred"
    "tartan"
  }

  SURFACE GRADE 2 {
    "ash"
    "clay"
    "compacted"
    "compacted_gravel"
    "fine_gravel"
    "gravel"
    "gravel;grass"
    "grass_paver"
    "metal"
    "pebblestone"
    "stone"
    "wood"
  }

  SURFACE GRADE 3 {
    "unpaved"
    "dirt"
    "dirt/sand"
    "earth"
    "grass"
    "grass;earth"
    "ground"
    "mud"
    "sand"
    "soil"
  }

  SURFACE GRADE 4 {
    "artificial_turf"
    "bark_mulch"
  }

TYPES

  //
  // Motorways and motorways-like (only for cars)
  //
  
  TYPE highway_motorway
    = WAY ("highway"=="motorway")
      {Name, NameAlt, Ref, Destination}
      PATH[CAR] LOCATION OPTIMIZE_LOW_ZOOM PIN_WAY
  TYPE highway_motorway_link
    = WAY ("highway"=="motorway_link")
      {Name, NameAlt, Ref, Destination}
      PATH[CAR] LOCATION OPTIMIZE_LOW_ZOOM PIN_WAY
  
  // Other roads mainly for cars
  
  TYPE highway_trunk
    = WAY ("highway"=="trunk")
      {Name, NameAlt, Ref, Destination}
      PATH[FOOT BICYCLE CAR] LOCATION OPTIMIZE_LOW_ZOOM PIN_WAY
      
  TYPE highway_trunk_link
    = WAY ("highway"=="trunk_link")
      {Name, NameAlt, Ref, Destination}
      PATH[FOOT BICYCLE CAR] LOCATION OPTIMIZE_LOW_ZOOM PIN_WAY
       
  TYPE highway_primary 
    = WAY ("highway"=="primary")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION OPTIMIZE_LOW_ZOOM PIN_WAY
      
  TYPE highway_primary_link
    = WAY ("highway"=="primary_link")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION PIN_WAY

  TYPE highway_secondary
    = WAY ("highway"=="secondary")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION OPTIMIZE_LOW_ZOOM PIN_WAY
      
  TYPE highway_secondary_link
    = WAY ("highway"=="secondary_link")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION PIN_WAY
      
  TYPE highway_tertiary
    = WAY ("highway"=="tertiary")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION OPTIMIZE_LOW_ZOOM PIN_WAY
      
  TYPE highway_tertiary_link
    = WAY ("highway"=="tertiary_link")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION PIN_WAY
      
  TYPE highway_unclassified
    = WAY ("highway"=="unclassified")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION PIN_WAY
      
  TYPE highway_residential
    = WAY AREA ("highway"=="residential")
      {Name, NameAlt, Ref}
      PATH[FOOT BICYCLE CAR] LOCATION
      
//  TYPE highway_local
//    = WAY ("highway"=="unclassified" OR "highway"=="unclassified")
//      {Name, NameAlt, Ref}
//      PATH[FOOT BICYCLE CAR] LOCATION PIN_WAY

  TYPE highway_living_street
    = WAY AREA ("highway"=="living_street")
      {Name, NameAlt}
      PATH[FOOT BICYCLE CAR] LOCATION PIN_WAY
      
  TYPE highway_service
    = WAY AREA ("highway"=="service")
      {Name, NameAlt}
      PATH[FOOT BICYCLE CAR] LOCATION
  
  // Ways with main designation different to car
  
  TYPE highway_bus_guideway
    = WAY ("highway"=="bus_guideway")
      {Name, NameAlt, Ref}
      PATH

  //
  // Waterways and assorted
  //
  
  TYPE waterway_river
    = WAY ("waterway"=="river")
      {Name, NameAlt, Width, Tunnel}
      OPTIMIZE_LOW_ZOOM IGNORESEALAND PIN_WAY
      
  TYPE waterway_riverbank
    = AREA ("waterway"=="riverbank" OR ("natural"=="water" AND  "water"=="river"))
      {Name, NameAlt, Width}
      MERGE_AREAS
    
  TYPE waterway_canal
    = WAY ("waterway"=="canal")
      {Name, NameAlt, Width}
      OPTIMIZE_LOW_ZOOM IGNORESEALAND
      
  TYPE waterway_dock
    = NODE AREA ("waterway"=="dock")
      {Name, NameAlt, Width}
      ADDRESS MERGE_AREAS
    
  //
  // Railways and assorted
  //
  
  TYPE railway_rail
    = WAY ("railway"=="rail")
      {Bridge, Tunnel, Width}
      //OPTIMIZE_LOW_ZOOM
      
  TYPE railway_tram
    = WAY ("railway"=="tram")
      {Bridge, Tunnel, Width}
    
  TYPE railway_light_rail
    = WAY ("railway"=="light_rail")
      {Bridge, Tunnel, Width}

  //
  // Landuses
  //

  TYPE landuse_brownfield
    = AREA ("landuse"=="brownfield")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      GROUP landuse
       
  TYPE landuse_cemetery
    = AREA ("landuse"=="cemetery")
      {Name, NameAlt}
      GROUP landuse
    
  TYPE landuse_commercial
    = NODE AREA ("landuse"=="commercial")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      GROUP landuse
       
  TYPE landuse_construction
    = NODE AREA ("landuse"=="construction")
      {Name, NameAlt} MERGE_AREAS
      GROUP landuse
    
  TYPE wood
    = NODE AREA ("landuse"=="forest" OR "natural"=="wood" OR "landcover"=="trees")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      GROUP landuse

  TYPE landuse_garages
    = AREA ("landuse"=="garages")
      {Name, NameAlt}
      GROUP landuse
    
  TYPE landuse_grass
    = NODE AREA ("landuse"=="grass")
      {Name, NameAlt} MERGE_AREAS
      GROUP landuse
    
  TYPE landuse_greenfield
    = NODE AREA ("landuse"=="greenfield")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      GROUP landuse
      
  TYPE landuse_industrial
    = NODE AREA ("landuse"=="industrial")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      GROUP landuse
      
  TYPE landuse_orchard
    = NODE AREA ("landuse"=="orchard")
      {Name, NameAlt} MERGE_AREAS
      GROUP landuse

  TYPE landuse_railway
    = AREA ("landuse"=="railway")
      {Name, NameAlt} MERGE_AREAS
      GROUP landuse
    
  TYPE landuse_recreation_ground
    = NODE AREA ("landuse"=="recreation_ground")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      GROUP landuse
      
  TYPE landuse_residential
    = NODE AREA ("landuse"=="residential")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      GROUP landuse
      
  TYPE landuse_retail
    = NODE AREA ("landuse"=="retail")
      MERGE_AREAS
      GROUP landuse
    
  TYPE landuse_vineyard
    = AREA ("landuse"=="vineyard")
      {Name, NameAlt}
      MERGE_AREAS
      GROUP landuse
    
  //
  // Natural
  //

  TYPE natural_grassland
    = AREA ("natural"=="grassland")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      
  TYPE natural_heath
    = NODE AREA ("natural"=="heath")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS
      
  TYPE natural_scrub
    = NODE AREA ("natural"=="scrub")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM MERGE_AREAS

  //
  // Leisure 
  //
                
  TYPE leisure_golf_course
    = NODE AREA ("leisure"=="golf_course")
      {Name, NameAlt}
      ADDRESS POI OPTIMIZE_LOW_ZOOM

  TYPE leisure_park
    = NODE AREA ("leisure"=="park")
      {Name, NameAlt}
      OPTIMIZE_LOW_ZOOM POI MERGE_AREAS
      
  TYPE leisure_garden
    = NODE AREA ("leisure"=="garden")
      {Name, NameAlt}
      MERGE_AREAS

  //
  // Amenity
  //

  TYPE amenity_hospital
    = NODE AREA ("amenity"=="hospital")
      {Name, NameAlt}
      ADDRESS POI
      GROUP amenity

  TYPE amenity_school
    = NODE AREA ("amenity"=="school")
      {Name, NameAlt}
      ADDRESS POI
      GROUP amenity

  //
  // Regions, locations, cities stuff
  // 

  // Do not delete the following type, they are required by the GenLocation import step
  TYPE boundary_country
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="2") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="2")
      {Name, NameAlt, AdminLevel}
      MULTIPOLYGON IGNORESEALAND

  TYPE boundary_state
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="4") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="4")
      {Name, NameAlt, AdminLevel}
      MULTIPOLYGON IGNORESEALAND

  TYPE boundary_county
    = WAY AREA ("boundary"=="administrative" AND "admin_level"=="6") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative" AND "admin_level"=="6")
      {Name, NameAlt, AdminLevel}
      MULTIPOLYGON IGNORESEALAND

  TYPE boundary_administrative
    = WAY AREA ("boundary"=="administrative") OR
      RELATION ("type"=="boundary" AND "boundary"=="administrative")
      {Name, NameAlt, AdminLevel}
      MULTIPOLYGON IGNORESEALAND

  TYPE place_city
    = NODE AREA ("place"=="city")
      {Name, NameAlt}
      ADMIN_REGION
    
  TYPE place_town
    = NODE AREA ("place"=="town")
      {Name, NameAlt}
      ADMIN_REGION
    
  TYPE place_village
    = NODE AREA ("place"=="village")
      {Name, NameAlt}
      ADMIN_REGION

  //
  // Buildings
  //
    
  TYPE building
    = AREA (EXISTS "building" AND !("building" IN ["no","false","0"]))
      {Name, NameAlt}
      ADDRESS

END
