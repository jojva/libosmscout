OSS
/*
  SYNTAX
  ======

   The OSS file defines how data is visualsized in a map. In constists of the
   following sections:

   FLAGS:
     The flag sections allows you to define a number of flags you can later
     on make use of conditional evaluation on using simple
     
       IF [!] <variable> {
         ...
       }
       ELIF <variable> {
         ...
       }
       ELSE {
         ...
       }
       
     statements in the CONST section and in the STYLE section. Flags values
     are only assigned if the have not programmatically been set before in
     the style config. Thus you can manipulate flags before style loading
     programatically, allowing different style variant in your application
     bases on the same config file. Examples:
     * Show/hide certain features based on configuration
     * Support day/night modusby choosing different const values.

   ORDER WAYS:
     This section defines in which order ways are rendered. It defines a
     number groups which contains ways types. Ways types in the same group
     have the same rendering priority. Groups further down the style sheet
     are rendered below ways further up in the GROUP list. Rendering order
     is only relevant if ways of different types cross each other. Note
     that ways are first ordered by layer, then within a layer by rendering
     priority. So a bridge will always be rendered on top a "bridged" way,
     a tunnel always below a "tunneled" ways.

   CONST:
     This (currently) allows you to define named constants for colors. Named
     colors can be used anywhere you can use "raw" rgb(a) values using the
     "@"<colorname> syntax. Note it is possible to enhance the CONST section
     to support constants for other types, too. Just make a feature request!

   SYMBOL:
     The SYMBOL sections allows you to define simple vectorized symbols
     consisting of one or more simple primitives like rectangles and circles.
     It is medium complicated for a backend to support symbols and likely
     simpler than support of external images or SVGs. Use SYMBOLs for things
     like oneway arrows, simple signs or similar.

     Currently the following primives are supported:
       * RECTANGLE <x> , <y> <width> x <height> { area style definitions }
       * CIRCLE    <x> , <y> <radius> { area style definitions }
       * POLYGON   <x> , <y> ...more coordinates... { area style definitions }

     "area style definitions" are normal style definitions for areas as
     used within the STYLE section.

   STYLE:
     The style section is a CSS-like aproach to define a number of filters
     for objects (nodes, areas, ways) put into the renderer, where each
     filter can manipulate the rendering attributes of the object.

     By default an object is not rendered at all. You need to set at least
     some attributes to get an object rendered.

     The fundamental aspect of this sections are filters, objects and
     the style definition itself.

     Filter are defined in "[" ... "]" brackets. The following filter
     criteria exist:
     * GROUP <groupname> "," <groupname>... - matches all types
       that are in all the given groups (AND semantic)
     * FEATURE <featurename> "," <featurename>... - matches all types
       that have ALL the given features (AND semantic).
     * PATH - matches all types wihich are annotated as PATH in the
       OST file.  
     * TYPE <typename> "," <typename>... - the filter is valid only for
       objects that match one of the given types (OR semantic).
     * MAG <minLevel> - <maxLevel> - the filter is only valid for the
       given magnification interval. MinLevel or Maxlevel is optional
       with the obvious default.
     * ONEWAY - the filter only matches for oneways.
     * BRIDGE - the filter only matches for bridges
     * TUNNEL - the filter only matches for tunnels
     * SIZE <widthInMeter>m <minWidthMM>mm:<minWidthPx>px
            "<"
            <maxWidthMM>mm:<maxWidthPx>px - this filter restrict
       objects by dimension of things on map in releation
       to some size in real world. The minimum interval or
       the maximum interval is optional (with 0 and infivity as
       defaults). For each border the size in mm or the size in pixel
       is optional, too. The criteria transforms the size in meter
       to a size on map. This size on the map must be in the given
       interval.

     If a filter criteria is not given, the filter critera matches
     everything (all types, all magnifications,...). Criteria can only
     be used once in a filter and criteria must be written in the order
     above.

     A filter operates on a directly following style object, It can
     also be followed by a block ("{"..."}") which then can recursively
     contain additional filters and or style definitions.

     There are certain things we can assign a style onto:
     * NODE.ICON - A style definition for icon for a node
     * NODE.TEXT - A style definition for a label for a node
     * AREA - A style definition for drawing the area itself
     * AREA.TEXT - A style definition for a label on an area
     * WAY - A style definition for the main path of a way
     * Way#<pathName> - Addtional style definition for any
       number of additional slots/paths with different styles.
     * WAY.TEXT - A style definition for the contour label of
       a way.
     * WAY.SHIELD - A style definition for a plate or shield
       repeately placed onto the way.
     * WAY.SYMBOL - A style definition for a symbold repeatly
       drawn onto the way

     A style definition consists of a starting "{" a list of attributes
     with values ("<attributeName> ":" <value> ";") and a closing
     "}".

     A line style for paths (Way#slot {...}) has the following attributes:
     * color: <COLOR> - Color of the line. if not set, color
       is transparent (a lines is not drawn)
     * dash: <dashWidth> ","... - Size of the dashes. If not set
       lines is solid.
     * gapColor:  <COLOR> - Color drawn in the "gap", if not set
       gapColor is transparent.
     * displayWidth : <width>mm - width of the line in millimeter ("size
       on map")
     * width : <width>m - Width of the line in meters ("real
       word dimension").
     * displayOffset: <offset>mm - Offset of drawn line in relation
       to the actual path.
     * offset: <offset>m - Offset of the drawn line in relation
       to the actual path.
     * cap: <capStyle> - Cap to be used in all cases. Possible values
       are butt, round and square.
     * joinCap: <capStyle> - Cap in case where lines join. Possible values
       are butt, round and square.
     * endCap: <capStyle> - Cap in the case where the lines ends without
       joining another line.  Possible values are butt, round and square.
     * priority <integer value> - Drawing priority in relation to other
       slots/pathes of the same object. Smaller values are drawn first.

     An area style for areas (AREA {...}) has the following attributes:
     * color: <color> - The fill color. By default transparent so area will
       not be filled.
     * pattern: <patternName> - (File)name of an image that is repeately
       drawn on top of the area. By default no pattern will be drawn.
     * patternMinMag: <map> - Minimum magnification for the pattern to be
       drawn (deprecated, should be better defined by a filter). By default
       this is magWorld, so the pattern will always be drawn.
     * borderColor: <color> - Color of the border line. By default
       transparent so not border wil be drawn.
     * borderWidth: <width>mm - Width of the border in display size. By
       default the border with is 0.
     * borderDash:  <dashWidth> "," ... - Dash widths of the border. By
       default the border is solid.

     An text style for nodes or areas (NODE.TEXT#slot {...} or
     AREA.TEXT#slot {...}) has the following attributes:
     * label: <labelType> - Depending on the given type (label or ref)
       either the label value or the fref value of the object is used as
       label.
     * style: <styleValue> - Depending on the value (normal or emphasize) the
       label is either drawn normal or (depending on the backend the
       visualisation may be different) somehow emphasized.
     * color: <COLOR> - The color of the text
     * size: <SIZE> - The size of the text relative to the standard text size.
       2.0 for example genrates a text twice as height as normal.
     * scaleMag: <MAG> - Starting with the given magnification in the label
       is drawn bigger but on the same time with increasing transparency
       with increasing magnification, genrating an overlay-like effect.
     * priority: <value> - numeric value defining a relative priority between
       labels. Labels with a lower value will be drawn in favour of labels
       with a higher priority value. Note that labels with a certain alpha value
       will be ignored (so giant scaleMag labels will not "kill" all other
       labels beneeth).
     * autoSize: <true|false> - The size of the label is automatically scaled
       to fit the height of the area itself. Thus bigger areas will get bigger
       labels, label with not be higher than the actual area.

     A text style for a path (WAY.TEXT { ...}) has the following attributes:
     * label: <labelType> - Depending on the given type (label or ref)
       either the label value or the fref value of the object is used as label.
     * color: <COLOR> - The color of the text
     * size: <SIZE> - The size of the text relative to the standard text size.
       2.0 for example genrates a text twice as height as normal.

     A icon style for a node (NODE.ICON {...}) has the following attributes:
     * symbol: <symbolName> -  The name of the symbol to draw
     * name: <iconName>  - The name of the icon to draw. An icon name
       is normally mapped onto an external image. The supported image
       formats depend on the actual backend.

     A shield style for a path (WAY.SHIELD {...}) has the following attributes:
     * label: <labelType> - Depending on the given type (label or ref)
       either the label value or the fref value of the object is used as label.
     * color: <COLOR> - The color of the text
     * backgroundColor: <COLOR> - The color of the shield itself
     * borderColor: <COLOR> - The color of the border.
     * size: - The size of the text relative to the standard text size.
       2.0 for example genrates a text twice as height as normal.
     * priority: <value> - numeric value defining a relative priority between
       labels. Labels with a lower value will be drawn in favour of labels
       with a higher priority value. Note that labels with a certain alpha
       value will be ignored (so giant scaleMag labels will not "kill" all
       other labels beneeth).
     * shieldSpace: <space>mm - Space between each shield on a path.

  If you are interested in a more details syntax description please take a
  look at the OSS.atg file, which contains (besides the actual AST building
  code) the EBNF for the syntax.

  Label and icon placement
  ========================

  Icons and labels will we drawn vertically. Relative label positioning will be handled
  by position numbers. A higher position number will get rendered further down the list,
  a lower one furth to the top.

  Given the following labels and their position (displaying an alternate name for the mountain):

  3: 8848m
  1: Mount Everest
  2: Everest

  The labels will be rendered:

  Mount Everest
    Everest
     8848m

  Gaps in the position sequence are possible. The default is 0. The order of labels
  with the same position is undefined.
 */

/*
  Some general rules in the design of this specific style sheet:

  Labels:
  * A possible icon will always show on top
  * The main label (the name of the object) will always be shown below the icon (else on top)
  * A possible additional label (height of a peak) will be placed below the main label.
*/

FLAG
  showText        = true;
  everything      = true;
  natural         = true;
  wood            = true;
  waterway        = true;
  highway         = true;
  railway         = true;
  landuse         = true;
  leisure         = true;
  building        = true;
  place           = true;
  petiteroute     = true;
  
ORDER WAYS
  GROUP highway_motorway
  GROUP waterway_river, waterway_canal
  GROUP highway_trunk
  GROUP highway_primary
  GROUP highway_secondary
  GROUP highway_tertiary
  GROUP highway_motorway_link, highway_trunk_link, highway_primary_link, highway_secondary_link, highway_tertiary_link
  GROUP highway_unclassified, highway_residential
  GROUP railway_rail
  GROUP highway_living_street, highway_service, highway_bus_guideway, railway_tram, railway_light_rail

CONST
  // Magnifications
  MAG stepsMag                     = veryClose;
  MAG labelPathsMag                = veryClose;
  MAG specialBuildingMag           = close;
  MAG labelSpecialBuildingMag      = closer;
  MAG buildingMag                  = closer;
  MAG labelBuildingMag             = veryClose;
  MAG minorBuildingMag             = veryClose;

  // Label priorities
  UINT labelPrioCity               = 8;
  UINT labelPrioTown               = 9;
  UINT labelPrioVillage            = 10;
  UINT labelPrioNatural            = 20;
  UINT labelPrioLanduse            = 25;
  UINT labelPrioLeisure            = 26;
  UINT labelPrioHighwayServices    = 34;
  UINT labelPrioSpecialBuilding    = 37;
  UINT labelPrioAmenity            = 45;
  UINT labelPrioBuilding           = 100;

  // Ground tiles

  COLOR waterColor                 = #9acffd;
  COLOR waterLabelColor            = darken(@waterColor, 0.5);

  // Landuse, water
  COLOR brownFieldColor            = #b6b592;//#ebd7fe;
  COLOR brownFieldLabelColor       = darken(@brownFieldColor, 0.5);

  COLOR cemeteryColor              = #a9caae;
  COLOR commercialColor            = #efc8c8;
  COLOR constructionColor          = #9d9d6c;
  
  COLOR woodColor                  = #aed1a0;
  COLOR woodLabelColor             = darken(@woodColor, 0.5);

  COLOR grassColor                 = #cfeca8;
  COLOR greenFieldColor            = #dcdcc8;
  COLOR heathColor                 = #ffffc0;
  COLOR industrialColor            = #dfd1d6;
  
  COLOR recreationColor            = #bce2ca;

  COLOR residentialColor           = #ebebeb;
  COLOR residentialLabelColor      = darken(@residentialColor, 0.5);

  COLOR retailColor                = #feeaea;
  COLOR retailLabelColor           = darken(@retailColor, 0.5);

  COLOR scrubColor                 = #b5e2b5;
  COLOR vineyardColor              = #b3e2a8;

  // Ways
  COLOR bridgeColor                = #000000; // black

  COLOR motorwayColor              = #4440ec; // dark blue
  COLOR trunkColor                 = #7674ec; // lighther blue
  COLOR primaryColor               = #ec4044; // red
  COLOR secondaryColor             = #fdac44; // orange
  COLOR tertiaryColor              = #fef271; // yelow
  COLOR roadColor                  = #ffffff; // white
  COLOR roadBColor                 = #bfbfbf;
  COLOR livingStreetColor          = #bababa; // grey
  
  COLOR wayLabelColor              = #000000; // black
  
  // Buildings
  COLOR buildingColor              = #d9d9d9;
  COLOR buildingBorderColor        = darken(@buildingColor, 0.3);
  COLOR buildingLabelColor         = darken(@buildingColor, 0.5);

  // Travel
  COLOR railwayColor               = #bb75d9;
  COLOR railwayLabelColor          = darken(@railwayColor, 0.5);

  // Amenity
  COLOR amenityColor               = #f0f0d8;
  COLOR amenityBuildingColor       = #d9b8b8;
  COLOR amenityLabelColor          = darken(@amenityBuildingColor, 0.5);

  COLOR hospitalColor              = darken(@amenityColor, 0.1);
  COLOR hospitalBorderColor        = darken(@hospitalColor, 0.3);

STYLE
  // -------------------------------------------------------
  //
  // Synthetic
  //

IF everything {
  IF natural {
    [MAG state-] {
      [TYPE natural_grassland] AREA { color: @grassColor; }
      [TYPE natural_heath] AREA { color: @heathColor; }
      [TYPE natural_scrub] AREA { color: @scrubColor; pattern: "scrub"; patternMinMag: cityOver; }
    }

IF showText {
  [MAG detail-] {
    [TYPE natural_grassland,
      natural_heath,
  natural_scrub] AREA.TEXT { label: Name.name ; priority: @labelPrioNatural; autoSize: true;}
  }
    }
  }  

  IF wood {
    [MAG state-] {
      [TYPE wood] AREA { color: @woodColor; }
    }
    
    IF showText {
    [MAG detail-] {
      [TYPE wood] AREA.TEXT { label: Name.name ; priority: @labelPrioNatural; color: @woodLabelColor; autoSize: true;}
    }
    }
  }

  // -------------------------------------------------------
  //
  // waterway_*
  //

  IF waterway {
    [MAG proximity-] {
      [TYPE waterway_river,
            waterway_canal] {
        [SIZE 15m 0.25mm:3px<] {
          WAY {color: @waterColor; width: 15m;}

          [TUNNEL] {
            WAY#ldash {color: @waterColor; dash: 3,3; displayWidth: 0.3mm; offset: -7.5m; priority: 1; }
            WAY#rdash {color: @waterColor; dash: 3,3; displayWidth: 0.3mm; offset: 7.5m; priority: 1;}

            WAY {color: #f2f6f6; width: 15m;}
          }
        }

        [SIZE 15m <0.25mm:3px] {
          WAY {color: @waterColor; displayWidth: 0.25mm; }

          [TUNNEL] {
            WAY {color: #ff000000;}
          }
        }
      }

      [TYPE waterway_dock,
            waterway_riverbank] AREA { color: @waterColor; }
    }

    // Labels

IF showText {
    [MAG proximity-] {
      [TYPE waterway_dock] AREA.TEXT { label: Name.name; priority: 25; color: @waterLabelColor; autoSize: true;}
    }

    [MAG veryClose-] {
      [TYPE waterway_river,
            waterway_canal]
        WAY.TEXT { label: Name.name; color: @waterLabelColor;}

      [TYPE waterway_riverbank] AREA.TEXT { label: Name.name; priority: 25; color: @waterLabelColor;}
    }
    }
  }

 // -------------------------------------------------------
 //
 // highway_*
 //

IF highway {
 [MAG continent-] {
   [TYPE highway_motorway] {
     [SIZE 20m 0.45mm:3px<] {
       WAY#outline { color: darken(@motorwayColor,0.4); width: 20m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @motorwayColor; width: 20m;}
     }
     [SIZE 20m <0.45mm:3px] WAY { color: lighten(@motorwayColor,0.3); displayWidth: 0.45mm;}
   }
 }

 [MAG county-] {
   [TYPE highway_trunk] {
     [SIZE 18m 0.4mm:3px<] {
       WAY#outline { color: darken(@trunkColor,0.4); width: 18m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @trunkColor; width: 18m;}
     }
     [SIZE 18m <0.4mm:3px] WAY { color: lighten(@trunkColor,0.3); displayWidth: 0.4mm;}
   }

   [TYPE highway_primary] {
     [SIZE 14m 0.4mm:3px<] {
       WAY#outline { color: darken(@primaryColor,0.4); width: 14m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @primaryColor; width: 14m;}
     }
     [SIZE 14m <0.4mm:3px] WAY { color: lighten(@primaryColor,0.3); displayWidth: 0.4mm;}
   }
 }
 
 [MAG proximity-] {
   [TYPE highway_secondary] {
     [SIZE 12m 0.25mm:3px<] {
       WAY#outline { color: darken(@secondaryColor,0.4); width: 12m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @secondaryColor; width: 12m;}
     }
     [SIZE 12m <0.25mm:3px] WAY { color: #fdd654; displayWidth: 0.25mm; }
   }
 }

 [MAG cityOver-] {
   [TYPE highway_tertiary] {
     [SIZE 10m 0.25mm:3px<] {
       WAY#outline { color: darken(@tertiaryColor,0.4); width: 10m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @tertiaryColor; width: 10m;}
     }
     [SIZE 10m <0.25mm:3px] WAY { color: #fefe73; displayWidth: 0.25mm;}
   }
 }

 [MAG city-] {
    [TYPE highway_motorway_link] {
      [SIZE 20m 0.45mm:3px<] {
        WAY#outline { color: darken(@motorwayColor,0.4); width: 20m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
        WAY { color: @motorwayColor; width: 20m;}
      }
      [SIZE 20m <0.45mm:3px] WAY { color: lighten(@motorwayColor,0.3); displayWidth: 0.45mm;}
    }
 }

 [MAG suburb-] {
   [TYPE highway_trunk_link] {
     [SIZE 18m 0.4mm:3px<] {
       WAY#outline { color: darken(@trunkColor,0.4); width: 18m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @trunkColor; width: 18m;}
     }
     [SIZE 18m <0.4mm:3px] WAY { color: lighten(@trunkColor,0.3); displayWidth: 0.4mm;}
   }

   [TYPE highway_primary_link] {
     [SIZE 14m 0.4mm:3px<] {
       WAY#outline { color: darken(@primaryColor,0.4); width: 14m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @primaryColor; width: 14m;}
     }
     [SIZE 14m <0.4mm:3px] WAY { color: lighten(@primaryColor,0.3); displayWidth: 0.4mm;}
   }

   [TYPE highway_secondary_link] {
     [SIZE 12m 0.25mm:3px<] {
       WAY#outline { color: darken(@secondaryColor,0.4); width: 12m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @secondaryColor; width: 12m;}
     }
     [SIZE 12m <0.25mm:3px] WAY { color: #fdd654; displayWidth: 0.25mm;}
   }

   [TYPE highway_tertiary_link] {
     [SIZE 12m 0.25mm:3px<] {
       WAY#outline { color: darken(@secondaryColor,0.4); width: 12m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @secondaryColor; width: 12m;}
     }
     [SIZE 12m <0.25mm:3px] WAY { color: #fdd654; displayWidth: 0.25mm; }
   }
   
   [TYPE highway_unclassified,
         highway_residential] {
     [SIZE 8m 0.1mm:3px<] {
       WAY#outline { color: @roadBColor; width: 8m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @roadColor; width: 8m;}
     }
     [SIZE 8m <0.1mm:3px] WAY { color: #999999; displayWidth: 0.1mm; }

     AREA { color: #999999; }
   }
 }

IF petiteroute {
 [MAG close-] {
   [TYPE highway_service] {
     [SIZE 8m 0.1mm:3px<] {
       WAY#outline { color: @roadBColor; width: 8m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @roadColor; width: 8m;}
     }
     [SIZE 8m <0.1mm:3px] WAY { color: #999999; displayWidth: 0.1mm;}
   }

   [TYPE highway_living_street] {
     [SIZE 8m 0.1mm:3px<] {
       WAY#outline { color: @roadBColor; width: 8m; displayWidth: 0.5mm; priority: -1; joinCap: butt; }
       WAY { color: @livingStreetColor; width: 8m;}
     }
     [SIZE 8m <0.1mm:3px] WAY { color: @livingStreetColor; displayWidth: 0.1mm;}
   }

   [TYPE highway_service] AREA { color: @roadColor; borderColor: @roadBColor; borderWidth: 0.1mm; }
 }

 [MAG closer-] {
   [TYPE highway_bus_guideway] WAY {color: #90570c; displayWidth: 0.1mm; }

   [TYPE highway_motorway, highway_motorway_link SIZE 20m 0.45mm:3px<] {
     [TUNNEL] {
       WAY#outline { dash: 0.5,0.5; }
       WAY { color: lighten(@motorwayColor,0.3);}
     }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -10m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 10m; displayOffset: 0.25mm;}
     }
   }

   [TYPE highway_trunk, highway_trunk_link SIZE 18m 0.4mm:3px<] {
     [TUNNEL] {
       WAY#outline { dash: 0.5,0.5; }
       WAY { color: lighten(@trunkColor,0.3);}
     }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -9m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 9m; displayOffset: 0.25mm;}
     }
   }

   [TYPE highway_primary, highway_primary_link SIZE 14m 0.4mm:3px<] {
     [TUNNEL] {
       WAY#outline { dash: 0.5,0.5; }
       WAY { color: lighten(@primaryColor,0.3);}
     }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -7m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 7m; displayOffset: 0.25mm;}
     }
   }

   [TYPE highway_secondary, highway_secondary_link SIZE 12m 0.25mm:3px<] {
     [TUNNEL] {
       WAY#outline { dash: 0.5,0.5; }
       WAY { color: lighten(@secondaryColor,0.3);}
     }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -6m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 6m; displayOffset: 0.25mm;}
     }
   }

   [TYPE highway_tertiary SIZE 10m 0.25mm:3px<] {
     [TUNNEL] {
       WAY#outline { dash: 0.5,0.5; }
       WAY { color: lighten(@tertiaryColor,0.3);}
     }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -5m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 5m; displayOffset: 0.25mm;}
     }
   }

   [TYPE highway_unclassified, highway_residential SIZE 8m 0.1mm:3px<] {
     // Better rendering?
     [TUNNEL] {
       WAY#outline { dash: 0.5,0.5; }
     }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -2.5m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 2.5m; displayOffset: 0.25mm;}
     }
   }

   [TYPE highway_service SIZE 8m 0.1mm:3px<] {
       // Better rendering?
       [TUNNEL] {
         WAY#outline { dash: 0.5,0.5; }
       }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -4m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 4m; displayOffset: 0.25mm;}
     }
   }

   [TYPE highway_living_street SIZE 8m 0.1mm:3px<] {
     [TUNNEL] {
       WAY#outline { dash: 0.5,0.5; }
       WAY { color: lighten(@livingStreetColor,0.3);}
     }

     [BRIDGE] {
       WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -4m; displayOffset: -0.25mm;}
       WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 4m; displayOffset: 0.25mm;}
     }
   }
 }
 }

 // Labels

 IF showText {
 [MAG detail-] {
   [TYPE highway_motorway,
         highway_motorway_link,
         highway_trunk,
         highway_trunk_link,
         highway_primary,
         highway_primary_link,
         highway_secondary,
         highway_secondary_link] WAY.TEXT{label: Name.name; color: @wayLabelColor; size: 1.0; }
 }

 [MAG veryClose-] {
   [TYPE highway_tertiary,
         highway_unclassified,
         highway_residential,
         highway_living_street,
         highway_service] WAY.TEXT { label: Name.name; color: @wayLabelColor; size: 0.9; }

   [TYPE highway_service] AREA.TEXT { label: Name.name; color: @wayLabelColor; priority: @labelPrioHighwayServices; }
 }

 [MAG @labelPathsMag-] {
   [TYPE highway_bus_guideway] WAY.TEXT { label: Name.name; color: @wayLabelColor; size: 0.8;}

 }
 }
 }


 // -------------------------------------------------------
 //
 // railway
 //

 IF railway {
   [MAG suburb-] {
     [TYPE railway_rail] {
       [SIZE 5m 0.25mm:3px<] {
         WAY#outline { color: #b3b3b3; width: 5m; displayWidth: 0.5mm; priority: -1; cap: butt; }
         WAY {color: #939393; dash: 3,3; cap: butt; gapColor: #ffffff; width: 5m;}
       }
       [SIZE 5m <0.25mm:3px] WAY {color: #777777; dash: 3,3; cap: butt; gapColor: #ffffff; displayWidth: 0.25mm;}
     }
   }

   [MAG close-] {
     [TYPE railway_tram] WAY {color: #444444; displayWidth: 0.25mm; width: 5m;}
     [TYPE railway_light_rail] WAY {color: #b3b3b3; displayWidth: 0.25mm; width: 5m;}
   }

   [MAG closer-] {
     [TYPE railway_rail SIZE 5m 0.25mm:3px<] {
       // Better rendering?
       [TUNNEL] {
         WAY#outline { dash: 0.5,0.5; }
       }

       [BRIDGE] {
         WAY#lbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: -2.5m; displayOffset: -0.25mm;}
         WAY#rbridge {color: @bridgeColor; displayWidth: 0.2mm; offset: 2.5m; displayOffset: 0.25mm;}
       }
     }

   }
   
   // Labels

   IF showText {
   [MAG @labelPathsMag-] {
     [TYPE railway_rail,
           railway_tram,
           railway_light_rail] WAY.TEXT { label: Name.name; size: 0.8; color: @railwayLabelColor; }
   }
   }
 }

 // -------------------------------------------------------
 //
 // Landuse
 //

IF landuse {
[MAG state-] {
  [TYPE landuse_greenfield] AREA { color: @greenFieldColor; }
  [TYPE landuse_industrial] AREA { color: @industrialColor; }
  [TYPE landuse_residential] AREA { color: @residentialColor; }
  [TYPE landuse_recreation_ground] AREA { color: @recreationColor; }
}

[MAG city-] {
  [TYPE landuse_vineyard] AREA { color: @vineyardColor; }
  [TYPE landuse_railway] AREA { color: #dcdcc8; }
  [TYPE landuse_cemetery] AREA { color: @cemeteryColor; pattern: "cemetery"; patternMinMag: detail; }
}

[MAG suburb-] {
  [TYPE landuse_commercial] AREA { color: @commercialColor; }
  [TYPE landuse_brownfield] AREA { color: @brownFieldColor; }
  [TYPE landuse_construction] AREA { color: @constructionColor; }
  [TYPE landuse_retail] AREA { color: @retailColor; borderColor: #c5a0a0; borderWidth: 0.1mm; }
}

[MAG close-] {
  [TYPE landuse_grass] AREA { color: @grassColor; }
  [TYPE landuse_orchard] AREA { color: #cfeca8; }
}

// Labels
IF showText {
  [MAG suburb-] {
    [TYPE landuse_brownfield] AREA.TEXT { label: Name.name; priority: @labelPrioLanduse; color: @brownFieldLabelColor; autoSize: true;}
    [TYPE landuse_residential] AREA.TEXT { label: Name.name; priority: @labelPrioLanduse; color: @residentialLabelColor; autoSize: true;}
    [TYPE landuse_retail] AREA.TEXT { label: Name.name; priority: @labelPrioLanduse; color: @retailLabelColor; autoSize: true;}
  }
  
  [MAG close-] {
    [TYPE landuse_vineyard,
          landuse_grass,
          landuse_greenfield,
          landuse_orchard,
          landuse_cemetery,
          landuse_commercial,
          landuse_recreation_ground] AREA.TEXT { label: Name.name; priority: @labelPrioLanduse; autoSize: true;}
  
    [TYPE landuse_industrial] AREA.TEXT { label: Name.name; style: emphasize; priority: @labelPrioLanduse; autoSize: true;}
  }
  
  [MAG veryClose-] {
    [TYPE landuse_railway,
          landuse_construction] AREA.TEXT { label: Name.name;  priority: @labelPrioLanduse; autoSize: true; }
  }
}
}

 // -------------------------------------------------------
 //
 // Leisure
 //

 IF leisure {
   [MAG county-] {
     [TYPE leisure_golf_course] AREA { color: #c7f1a3; }
     [TYPE leisure_park] AREA { color: #c6f0cf; }
   }

   [MAG close-] {
     [TYPE leisure_garden] AREA { color: #ceeca8; }
   }

   // Labels
   
   IF showText {
   [MAG close-] {
     [TYPE leisure_golf_course,
           leisure_park,
           leisure_garden] AREA.TEXT { label: Name.name; priority: @labelPrioLeisure; autoSize: true; }
   }
   }
 }

 // -------------------------------------------------------
 //
 // amenity
 //

IF building {
 [MAG detail-] {
   // Special amenities
   [TYPE amenity_hospital] AREA { color: @hospitalColor; borderColor: @hospitalBorderColor; borderWidth: 0.1mm; }

   // (Major) Amenities without special color
   [TYPE amenity_school] AREA { color: @amenityColor; }
 }

 // Buildings

   [MAG @buildingMag-] {
     // Amenity buildings

     [TYPE building] AREA { color: @buildingColor; borderColor: @buildingBorderColor; borderWidth: 0.1mm; }
   }

 // Labels
 IF showText {
 [MAG @labelSpecialBuildingMag-] {
   [TYPE amenity_hospital] {
     NODE.TEXT {label: Name.name; style: emphasize; color: #da0092; size: 1.0; priority: @labelPrioSpecialBuilding;}
     AREA.TEXT { label: Name.name; style: emphasize; color: #da0092; size: 1.0; priority: @labelPrioSpecialBuilding;}
   }
 }

   [MAG @labelBuildingMag-] {

     [TYPE building] {
       AREA.TEXT#buildingName { label: Name.name; color: @buildingLabelColor; size: 0.7; priority: @labelPrioBuilding; }
     }
     
     [TYPE amenity_school] {
       NODE.TEXT {label: Name.name; style: emphasize;color: @amenityLabelColor; size: 0.9; priority: @labelPrioAmenity; }
       AREA.TEXT { label: Name.name; style: emphasize; color: @amenityLabelColor; size: 0.9; priority: @labelPrioAmenity; }
     }
   }
 }
}

 // -------------------------------------------------------
 //
 // Places
 //

IF place {
IF showText {
 [MAG proximity-city] {
   [TYPE place_city] NODE.TEXT {scaleMag: region;}
   [TYPE place_town] NODE.TEXT {label: IName; style: emphasize; size: 1.3; priority: @labelPrioTown;}
 }

 [MAG region-city] {
   [TYPE place_city] NODE.TEXT {label: IName; style: emphasize; size: 1.35; priority: @labelPrioCity; }
 }

 [MAG city-veryClose] {
   [TYPE place_village] NODE.TEXT {label: IName; style: emphasize; size: 1.2; priority: @labelPrioVillage;}
   [TYPE place_town] NODE.TEXT {scaleMag: region;}
 }

 [MAG suburb-suburb] {
   [TYPE place_village] NODE.TEXT {scaleMag: suburb;}
 }
}
}
} // Everything

END
